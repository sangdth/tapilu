global !p
def upperfirst(t):
	if len(t) < 2:
		return '' if len(t) < 1 else t.capitalize()
	return t[0].capitalize() + t[1:]
def lowerdash(t):
	return '-'.join([ w.lower() for w in re.findall('[a-z]+|[A-Z]+[a-z]*', t) ])
endglobal

snippet rts "React TypeScript Component" b
import * as React from 'react';

type Props = {
	$2
};

const ${1:`!v expand('%:t:r')`} = (props: Props) => {
	return (
		<${3:div}>
			$0
		</$3>
	);
}

export default $1;
endsnippet

# ==========================================
# Test Snippets
#
snippet rtf "React Test File" b
import * as React from "react"
import { render } from "@testing-library/react"

import { ${1:`!v expand('%:t:r')`} } from "../$1"

describe("$1", () => {
	it("should $2", () => {
		$3
	})
})
endsnippet

snippet rcon "React class constructor" b
constructor(props: ${1:`!v expand('%:t:r')`}Props) {
	super(props)

	this.state = ${1:{}}$0
}
endsnippet

# ==========================================
# Hooks and effects
#

snippet useS "useState()" b
const [$1, set$4`!p snip.rv=upperfirst(t[1])`] = useState$3($2)$0
endsnippet

snippet useE "useEffect()" b
useEffect(() => {
	$0
}, [$1])
endsnippet


snippet useEA "useEffect() async" b
useEffect(() => {
	let cancelled = false

	;(async function ${4:doWork}(): Promise<${5:void}> {
		${1:// async work here}
		if (cancelled) {
			return
		}

		$2
	})()

	return () => {
		cancelled = true
	}
}, [$3])
endsnippet


snippet useCB "useCallback(fn, inputs)" b
const ${1:callback} = useCallback(($2) => ${3:{
	$4
}}, [$5])
endsnippet


snippet useM "useMemo(fn, inputs)" b
const ${1:memoized} = useMemo(() => ${2:{
	$3
}}, [$4])
endsnippet


snippet useR "useRef(defaultValue)" b
const ${1:ref} = useRef$3(${2:null})$0
endsnippet

